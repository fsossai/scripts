#!/bin/bash

compute_median () {
  numbers=($(printf "%s\n" "$@" | sort -n))
  count=${#numbers[@]}

  if (( $count % 2 == 1 )); then
    median=${numbers[$((count / 2))]}
  else
    mid1=${numbers[$((count / 2 - 1))]}
    mid2=${numbers[$((count / 2))]}
    median=$(echo "scale=2; ($mid1 + $mid2) / 2" | bc)
  fi

  echo $median
}

kill_turboboost () {
  # this only works well when the first hardware thread is used for
  # each core in all sockets
  last_core_id=$(( $(nproc --all) / 2 - 1 ))
  all_core_ids=$(seq 0 1 $last_core_id)
  in_use=($(tpin | head -n -1 | awk '{print $3}'))

  # burn cores that would not be in use
  for core_id in ${all_core_ids[@]}; do
    if [[ ! " ${in_use[@]} " =~ " $core_id " ]]; then
      taskset -c $core_id burnP6 &
    fi
  done
}

################################################################################

if [[ -z $cmd ]]; then
  echo "ERROR: no cmd provided"
  echo "Usage: option=x $0"
  echo
  echo "Options:"
  echo 
  echo " cmd         e.g.: \"/home/user/abc.out <<< /home/user/data.txt\""
  echo " runs        e.g.: 10"
  echo " maxt        e.g.: 56"
  echo " tspace      e.g.: \"1 2 4 8 16 24 28 32 40\""
  echo " turboboost  on | off (default is on)"
  echo " affinity    y | n (default is n)"
  echo " outfile     saves to 'out' instead of using the timestamp"
  echo " prefix      e.g.: mymachine"
  echo " postfix     e.g.: abc"
  echo " realtime    y | n (default is y)"
  echo " timestamp   e.g.: 240730-0126"
  echo " phase       e.g.: \"Kernel\""
  echo " unit        ms | s (default is ms)"
  echo " summary     e.g.: summary.json"
  echo
  echo "Others:"
  echo
  echo "'notes' and 'flags' will be written as fields of the json file"
  echo "if the corresponding environment variable is set."
  exit 1
fi

timer_start=$(date +%s.%3N)
timestamp_begin_json=$(date +'%Y-%m-%d %H:%M:%S')

# setting default values

if [[ -z $timestamp ]]; then
  timestamp=$(date +%y%m%d-%H%M)
fi

if [[ -z $runs ]]; then
  runs=3
fi

if [[ -z $phase ]]; then
  realtime="y"
fi

if [[ -z $realtime ]]; then
  realtime="n"
fi

if [[ -z $turboboost ]]; then
  turboboost="on"
fi

if [[ -z $affinity ]]; then
  affinity="n"
fi

if [[ -z $prefix ]]; then
  prefix="bm_"
fi

if [[ -z $outdir ]]; then
  outdir="."
fi

if [[ -z $outfile ]]; then
  outfile_csv="$prefix$timestamp$postfix.csv"
else
  outfile_csv="$outfile"
fi

if [[ -z $tspace ]]; then
  space=$(seq 1 $maxt)
fi

if [[ -z $unit ]]; then
  unit="ms"
fi

# creating the thread space
space=()
if [[ -n $tspace ]]; then
  for t in ${tspace//,/ }; do
    if [[ -n $maxt ]]; then
      if (( $t <= $maxt )); then
        space+=($t)
      fi
    else
      space+=($t)
    fi
  done
else
  if [[ -n $maxt ]]; then
    space=( $(seq 1 $maxt) )
  else
    space=(1)
  fi
fi

if (( ${#space[@]} == 0 )); then
  echo "WARNING: empty intersection. Please review 'tspace' and 'maxt'"
  space=(1)
fi

echo "cmd         = $cmd"
echo "runs        = $runs"
echo "maxt        = $maxt"
echo "tspace      = $tspace"
echo "turboboost  = $turboboost"
echo "affinity    = $affinity"
echo "realtime    = $realtime"
echo "phase       = $phase"
echo "unit        = $unit"
echo "summary     = $summary"
echo "outfile     = $outfile_csv"
echo "threads     = { ${space[@]} }"
echo

if [[ -n $summary ]]; then
  tspace_json=$(echo ${space[@]} | tr ' ' ',')
  json="$outdir/$summary"
  json_content=()
  json_content+="\"file\":\"$outfile_csv\""
  json_content+=("\"tspace\":[${tspace_json[@]}]")
  json_content+=("\"turboboost\":\"$turboboost\"")
  json_content+=("\"affinity\":\"$affinity\"")
  json_content+=("\"cmd\":\"$cmd\"")
  json_content+=("\"runs\":$runs")
  json_content+=("\"begin\":\"$timestamp_begin_json\"")
  if [[ -n $phase ]]; then
    json_content+=("\"phase\":\"$phase\"")
  fi
  if [[ -n $flags ]]; then
    json_content+=("\"flags\":\"$flags\"")
  fi
  if [[ -n $notes ]]; then
    json_content+=("\"notes\":\"$notes\"")
  fi
  if [[ -n $KMP_AFFINITY ]]; then
    json_content+=("\"kmp_affinity\":\"$KMP_AFFINITY\"")
  fi
  if [[ -n $OMP_PLACES ]]; then
    json_content+=("\"omp_places\":\"$OMP_PLACES\"")
  fi
  if [[ -n $LD_PRELOAD ]]; then
    json_content+=("\"ld_preload\":\"$LD_PRELOAD\"")
  fi
  IFS="," ; printf "{%s}\n" "${json_content[*]}" >> $summary
  echo "\"$summary\" has been updated"
fi

echo "threads,time" > $outfile_csv

for threads in ${space[@]}; do
  total_time=0
  E2=0
  mean2=0
  exec_times=()

  export OMP_NUM_THREADS=$threads

  if [[ $turboboost == "off" ]]; then
    kill_turboboost
  fi

  echo "OMP_NUM_THREADS = $threads"
  echo "KMP_AFFINITY    = $KMP_AFFINITY"
  echo "OMP_PLACES      = $OMP_PLACES"

  if [[ $affinity == "y" ]]; then
    in_use=$(tpin | awk '{print $3}' | sort -h)
    affinity_cmd="taskset -c $(echo $in_use | tr ' ' ',')"
    echo "affinity        = $affinity_cmd"
    echo 
  else
    affinity_cmd=""
  fi

  final_cmd="$affinity_cmd $cmd"

  for ((i=1; i<=runs; i++)); do
    printf "\tt=%s run %2i/%i : " $threads $i $runs

    if [[ $realtime == "y" ]]; then
      current_time=$({ time -p eval "$final_cmd" > /dev/null ; } 2>&1 | grep real | egrep -o "[0-9]*(\.[0-9]+)?")
      rc=$?
      current_time=$(echo "$current_time*1000" | bc)
    else
      cmd_out=$(eval "$final_cmd")
      rc=$?
      current_time=$(echo "$cmd_out" | grep -i $phase | egrep -o "[0-9]*(\.[0-9]+)?")
      if [[ $unit == "s" ]]; then
        current_time=$(echo "$current_time*1000" | bc)
      fi
    fi

    echo "$threads,$current_time" >> $outfile_csv
    exec_times+=($current_time)
    printf "%.3f ms (rc=%i)\n" $current_time $rc
    total_time=$(echo "$total_time+$current_time" | bc)
    E2=$(echo "scale=3; $E2+$current_time^2" | bc)
  done

  if [[ $turboboost == "off" ]]; then
    killall burnP6
  fi

  median=$(compute_median ${exec_times[@]})
  mean=$(echo "scale=3; $total_time/$runs" | bc)
  mean2=$(echo "$mean^2" | bc)
  E2=$(echo "scale=3; $E2/$runs" | bc)
  std=$(echo "scale=3; sqrt($E2-$mean2)" | bc)

  printf "\t[ median  = %8.3f ms ]\n" $median
  printf "\t[ mean    = %8.3f ms ]\n" $mean
  printf "\t[ std     = %8.3f ms ]\n" $std
  if [[ -n $baseline ]]; then
    speedup=$(echo "scale=3; $baseline/$mean" | bc)
    printf "\t[ speedup = %8.2f    ]\n" $speedup
  fi

  if (( $threads == 1 )); then
    baseline=$median
  fi

  echo
done

timer_stop=$(date +%s.%3N)
timestamp_end_json=$(date +'%Y-%m-%d %H:%M:%S')
elapsed=$(echo "scale=3; $timer_stop-$timer_start" | bc)

echo "\"$outfile_csv\" is ready" 
echo
echo "Elapsed time: $elapsed s"
