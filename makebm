#!/bin/bash

compute_median () {
  numbers=($(printf "%s\n" "$@" | sort -n))
  count=${#numbers[@]}

  if (( $count % 2 == 1 )); then
      median=${numbers[$((count / 2))]}
  else
      mid1=${numbers[$((count / 2 - 1))]}
      mid2=${numbers[$((count / 2))]}
      median=$(echo "scale=2; ($mid1 + $mid2) / 2" | bc)
  fi

  echo $median
}

################################################################################

if [[ -z $cmd ]]; then
  echo "ERROR: no cmd provided"
  echo "Usage: option=x $0"
  echo
  echo "Options:"
  echo 
  echo " cmd         e.g.: \"/home/user/abc.out <<< /home/user/data.txt\""
  echo " runs        e.g.: 10"
  echo " maxt        e.g.: 56"
  echo " tspace      e.g.: \"1,2,4,8,16,24,28,32,40\""
  echo " prefix      e.g.: mymachine"
  echo " postfix     e.g.: abc"
  echo " realtime    y | n (default is y)"
  echo " timestamp   e.g.: 240730-0126"
  echo " phase       e.g.: \"Kernel\""
  echo " json        e.g.: summary.json"
  exit 1
fi

timer_start=$(date +%s.%3N)
timestamp_begin_json=$(date +'%Y-%m-%d %H:%M:%S')

# setting default values

if [[ -z $timestamp ]]; then
  timestamp=$(date +%y%m%d-%H%M)
fi

if [[ -z $runs ]]; then
  runs=3
fi

if [[ -z $phase ]]; then
  realtime="y"
fi

if [[ -z $realtime ]]; then
  realtime="n"
fi

if [[ -z $prefix ]]; then
  prefix="bm_"
fi

if [[ -z $json ]]; then
  json="$prefix$timestamp$postfix.json"
fi

outfile_csv="$prefix$timestamp$postfix.csv"

if [[ -z $tspace ]]; then
  space=$(seq 1 $maxt)
else
  space=$(sed "s/,/ /g" <<< $tspace)
fi

# creating the thread space
space=()
if [[ -n $tspace ]]; then
  for t in ${tspace//,/ }; do
    if [[ -n $maxt ]]; then
      if (( $t <= $maxt )); then
        space+=($t)
      fi
    else
      space+=($t)
    fi
  done
else
  if [[ -n $maxt ]]; then
    space=( $(seq 1 $maxt) )
  else
    space=(1)
  fi
fi

if (( ${#space[@]} == 0 )); then
  echo "WARNING: empty intersection. Please review 'tspace' and 'maxt'"
  space=(1)
fi

echo "cmd         = $cmd"
echo "runs        = $runs"
echo "maxt        = $maxt"
echo "tspace      = $tspace"
echo "realtime    = $realtime"
echo "phase       = $phase"
echo "json        = $json"
echo "outfile     = $outfile_csv"
echo "threads     = { ${space[@]} }"
echo

echo "threads,time" > $outfile_csv

for threads in ${space[@]}; do
  total_time=0
  E2=0
  mean2=0
  exec_times=()

  export OMP_NUM_THREADS=$threads

  echo "OMP_NUM_THREADS = $threads"
  echo "KMP_AFFINITY    = $KMP_AFFINITY"
  echo "OMP_PLACES      = $OMP_PLACES"

  for ((i=1; i<=runs; i++)); do
    printf "\tt=%s run %2i/%i : " $threads $i $runs

    if [[ $realtime == "y" ]]; then
      current_time=$({ time -p eval "$cmd" > /dev/null ; } 2>&1 | grep real | egrep -o "[0-9]*(\.[0-9]+)?")
      rc=$?
      current_time=$(echo "$current_time*1000" | bc)
    else
      cmd_out=$(eval "$cmd")
      rc=$?
      current_time=$(echo "$cmd_out" | grep -i $phase | egrep -o "[0-9]*(\.[0-9]+)?")
    fi

    echo "$threads,$current_time" >> $outfile_csv
    exec_times+=($current_time)
    printf "%.3f ms (rc=%i)\n" $current_time $rc
    total_time=$(echo "$total_time+$current_time" | bc)
    E2=$(echo "scale=3; $E2+$current_time^2" | bc)
  done

  median=$(compute_median ${exec_times[@]})
  mean=$(echo "scale=3; $total_time/$runs" | bc)
  mean2=$(echo "$mean^2" | bc)
  E2=$(echo "scale=3; $E2/$runs" | bc)
  std=$(echo "scale=3; sqrt($E2-$mean2)" | bc)

  printf "\t[ median  = %8.3f ms ]\n" $median
  printf "\t[ mean    = %8.3f ms ]\n" $mean
  printf "\t[ std     = %8.3f ms ]\n" $std
  if [[ -n $baseline ]]; then
    speedup=$(echo "scale=3; $baseline/$mean" | bc)
    printf "\t[ speedup = %8.2f    ]\n" $speedup
  fi

  if (( $threads == 1 )); then
    baseline=$median
  fi

  echo
done

timer_stop=$(date +%s.%3N)
timestamp_end_json=$(date +'%Y-%m-%d %H:%M:%S')
elapsed=$(echo "scale=3; $timer_stop-$timer_start" | bc)
tspace_json=$(echo ${space[@]} | tr ' ' ',')

json_content=()
json_content+="\"file\":\"$outfile_csv\""
json_content+=("\"tspace\":\"${tspace_json[@]}\"")
json_content+=("\"cmd\":\"$cmd\"")
json_content+=("\"runs\":\"$runs\"")
json_content+=("\"elapsed_s\":\"$elapsed\"")
json_content+=("\"phase\":\"$phase\"")
json_content+=("\"begin\":\"$timestamp_begin_json\"")
json_content+=("\"end\":\"$timestamp_end_json\"")

IFS="," ; printf "{%s}\n" "${json_content[*]}" >> $json

echo "\"$outfile_csv\" is ready" 
echo "\"$json\" has been updated"
echo
echo "Elapsed time: $elapsed s"
